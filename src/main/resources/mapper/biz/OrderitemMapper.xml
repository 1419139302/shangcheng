<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zzy.shopp.app.biz.mapper.OrderitemMapper">
	<resultMap id="BaseResultMap" type="com.zzy.shopp.app.biz.model.Orderitem">
		<!--
          WARNING - @mbg.generated
        -->
		<result column="id" property="id" jdbcType="BIGINT"/>
		<result column="pid" property="pid" jdbcType="BIGINT"/>
		<result column="oid" property="oid" jdbcType="BIGINT"/>
		<result column="uid" property="uid" jdbcType="BIGINT"/>
		<result column="number" property="number" jdbcType="INTEGER"/>
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
		<result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
		<result column="delete_time" property="deleteTime" jdbcType="TIMESTAMP"/>
		<result column="is_del" property="isDel" jdbcType="BIT"/>
	</resultMap>
	<sql id="basicSelectSql">
		`id`,
		`pid`,
		`oid`,
		`uid`,
		`number`,
		`create_time`,
		`update_time`,
		`delete_time`,
		`is_del`
	</sql>

	<sql id="basicWhereColumn">
		<if test="id != null">
			AND `id` = #{id}
		</if>
		<if test="pid != null">
			AND `pid` = #{pid}
		</if>
		<if test="oid != null">
			AND `oid` = #{oid}
		</if>
		<if test="uid != null">
			AND `uid` = #{uid}
		</if>
		<if test="number != null">
			AND `number` = #{number}
		</if>
		<if test="createTime != null">
			AND `create_time` = #{createTime}
		</if>
		<if test="updateTime != null">
			AND `update_time` = #{updateTime}
		</if>
		<if test="deleteTime != null">
			AND `delete_time` = #{deleteTime}
		</if>
		<if test="isDel != null">
			AND `is_del` = #{isDel}
		</if>
	</sql>

	<sql id="basicWhereEntitySql">
		<where>
			<include refid="basicWhereColumn"/>
		</where>
	</sql>

	<sql id="basicWhereMapSql">
		<where>
			<include refid="basicWhereColumn"/>
		</where>
	</sql>

	<select id="getById" resultType="com.zzy.shopp.app.biz.model.Orderitem">
		SELECT
		<include refid="basicSelectSql"/>
		FROM `s_orderitem`
		<where>
			`id` = #{id}
		</where>
		LIMIT 1;
	</select>

	<select id="getList" resultType="com.zzy.shopp.app.biz.model.Orderitem">
		SELECT
		<include refid="basicSelectSql"/>
		FROM `s_orderitem`
		<include refid="basicWhereEntitySql"/>
		;
	</select>

	<select id="likeGetList" parameterType="com.zzy.shopp.app.biz.vo.CommonSelectVo"
			resultMap="BaseResultMap">
		SELECT
		<include refid="basicSelectSql"/>
		FROM `s_orderitem`
		<where>
			<trim prefixOverrides="AND">
				<if test="queryCriteria != null">
					and CONCAT_WS(' ',
					IFNULL(`id`,''),
					IFNULL(`pid`,''),
					IFNULL(`oid`,''),
					IFNULL(`uid`,''),
					IFNULL(`number`,''),
					IFNULL(`create_time`,''),
					IFNULL(`update_time`,''),
					IFNULL(`delete_time`,''),
					IFNULL(`is_del`,'')
					) like CONCAT('%', #{queryCriteria}, '%')
				</if>
				and is_del = 0
			</trim>
		</where>
	</select>

	<update id="update" parameterType="com.zzy.shopp.app.biz.model.Orderitem">
		UPDATE `s_orderitem`
		<set>
			<if test="pid != null">
				`pid` = #{pid},
			</if>
			<if test="oid != null">
				`oid` = #{oid},
			</if>
			<if test="uid != null">
				`uid` = #{uid},
			</if>
			<if test="number != null">
				`number` = #{number},
			</if>
			<if test="updateTime != null">
				`update_time` = #{updateTime},
			</if>
			<if test="deleteTime != null">
				`delete_time` = #{deleteTime},
			</if>
			<if test="isDel != null">
				`is_del` = #{isDel},
			</if>
		</set>
		<where>
			`id` = #{id}
		</where>
	</update>


	<update id="deleteById" parameterType="com.zzy.shopp.app.biz.model.Orderitem">
		UPDATE `s_orderitem`
		SET `is_del`=1
		<where>
			`id` = #{id}
		</where>
	</update>

	<insert id="add" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO
        `s_orderitem`
        (`pid`,`oid`,`uid`,`number`,`create_time`,`update_time`,`delete_time`,`is_del`)
        VALUES
        (#{pid},#{oid},#{uid},#{number},#{createTime},#{updateTime},#{deleteTime},#{isDel})
    </insert>

	<insert id="addList">
		INSERT INTO
		`s_orderitem`
		(`id`,`pid`,`oid`,`uid`,`number`,`create_time`,`update_time`,`delete_time`,`is_del`)
		VALUES
		<foreach collection="list" item="item" index="index" separator=",">
			(#{item.id},#{item.pid},#{item.oid},#{item.uid},#{item.number},#{item.createTime},#{item.updateTime},#{item.deleteTime},#{item.isDel})
		</foreach>
	</insert>


</mapper>